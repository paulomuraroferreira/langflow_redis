{"data":{"edges":[],"nodes":[{"data":{"type":"RedisChatMemory","node":{"template":{"_type":"Component","RedisURL":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"RedisURL","display_name":"Redis URL (Optional)","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Redis URL","title_case":false,"type":"str"},"cluster_kwargs":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":{},"name":"cluster_kwargs","display_name":"Cluster arguments","advanced":true,"dynamic":false,"info":"Optional dictionary of additional keyword arguments for the Redis cluster.","title_case":false,"type":"dict"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.memory.model import LCChatMemoryComponent\nfrom langflow.inputs import MessageTextInput, SecretStrInput, DictInput, MultilineInput\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.field_typing import BaseChatMessageHistory\nimport subprocess\nimport time\nfrom langchain_community.chat_message_histories import RedisChatMessageHistory\nimport socket\n\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n\nclass RedisChatMemory(LCChatMemoryComponent):\n    display_name = \"Redis Chat Memory\"\n    description = \"Retrieves chat messages from Redis.\"\n    name = \"RedisChatMemory\"\n    icon = \"RedisChatMemory\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"RedisURL\",\n            display_name=\"Redis URL (Optional)\",\n            info=\"Redis URL\",\n            required=False,\n        ),\n        SecretStrInput(\n            name=\"password\",\n            display_name=\"Password (Optional)\",\n            info=\"User password for the database.\",\n            required=False,\n        ),\n        MessageTextInput(\n            name=\"redis_session_id\",\n            display_name=\"Redis Session ID (Optional)\",\n            info=\"Redis Session ID.\",\n            advanced=False,\n            required=False\n        ),\n        DictInput(\n            name=\"cluster_kwargs\",\n            display_name=\"Cluster arguments\",\n            info=\"Optional dictionary of additional keyword arguments for the Redis cluster.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    \n    \n    def is_port_in_use(self, port):\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            return s.connect_ex(('localhost', port)) == 0\n    \n    def start_redis_server(self,port=6379, password=None):\n        if self.is_port_in_use(port):\n            logging.error(f\"Port {port} is already in use. Please choose a different port.\")\n            return None\n    \n        cmd = ['redis-server', '--port', str(port)]\n        if password:\n            cmd.extend(['--requirepass', password])\n    \n        try:\n            redis_process = subprocess.Popen(cmd)\n            time.sleep(2)  # Wait for Redis server to start\n    \n            # Check if the process is still running\n            if redis_process.poll() is None:\n                logging.info(f\"Redis server started successfully on port {port}\")\n                return redis_process\n            else:\n                logging.error(f\"Failed to start Redis server on port {port}\")\n                return None\n        except Exception as e:\n            logging.error(f\"Error starting Redis server: {e}\")\n            return None\n    \n\n    def build_message_history(self) -> BaseChatMessageHistory:\n        \n        session_id = self.redis_session_id or 'default_redis_user_session'\n\n        if self.RedisURL:\n            url = self.RedisURL\n        else:\n            port=6379\n            password=self.password or 'admin'\n            url = f\"redis://default:{password}@localhost:{port}\"\n            self.start_redis_server(password=password)\n\n        memory = RedisChatMessageHistory(session_id=session_id, url=url)\n\n        return memory","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"password":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"","name":"password","display_name":"Password (Optional)","advanced":false,"input_types":[],"dynamic":false,"info":"User password for the database.","title_case":false,"password":true,"type":"str"},"redis_session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"teste21","name":"redis_session_id","display_name":"Redis Session ID (Optional)","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Redis Session ID.","title_case":false,"type":"str"}},"description":"Retrieves chat messages from Redis.","icon":"RedisChatMemory","base_classes":["BaseChatMessageHistory"],"display_name":"Custom Component","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["BaseChatMessageHistory"],"selected":"BaseChatMessageHistory","name":"memory","display_name":"Memory","method":"build_message_history","value":"__UNDEFINED__","cache":true}],"field_order":["RedisURL","password","redis_session_id","cluster_kwargs"],"beta":false,"edited":true,"official":false},"id":"CustomComponent-rtwGz","description":"Retrieves chat messages from Redis.","display_name":"Custom Component"},"id":"CustomComponent-rtwGz","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Retrieves chat messages from Redis.","name":"Custom Component","id":"CustomComponent-rtwGz","is_component":true,"last_tested_version":"1.0.11"}